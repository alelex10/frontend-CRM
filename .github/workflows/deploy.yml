# Ve al repo en GitHub → Settings → Secrets and variables → Actions → New repository secret. Añade:
# DOCKERHUB_USERNAME = tu nombre de usuario en Docker Hub
# DOCKERHUB_TOKEN = tu Docker Hub access token (no tu password) — en Docker Hub creás un Access Token desde tu cuenta > Security > New Access Token.
# OCI_SSH_KEY = el contenido completo de tu clave privada (~/.ssh/oci_deploy_key). Pega todo (incluyendo -----BEGIN OPENSSH PRIVATE KEY-----...).
# TARGET_HOST = tu IP o nombre de host de la instancia remota
# TARGET_USER = el usuario de la instancia remota
# NEXT_PUBLIC_BASE_URL = la URL de tu aplicación (no incluye el path)
# CONTAINER_NAME = backend-crm (puedes ponerlo también en el workflow)
# CONTAINER_PORT = 3000 (puedes ponerlo también en el workflow)
# Nota de seguridad: usa un token limitado y no uses tu clave privada personal si prefieres desplegar desde una clave dedicada.

name: CI/CD - Docker Compose Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: alelex10/frontend-crm
  CONTAINER_NAME: frontend-crm
  CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image tag
        id: set-tag
        run: echo "image_tag=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create .env
        run: |
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> .env

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Add host to known_hosts
        run: ssh-keyscan -H ${{ secrets.TARGET_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.TARGET_HOST }}
          username: ${{ secrets.TARGET_USER }}
          key: ${{ secrets.OCI_SSH_KEY }}
          script: |
            set -e 

            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d --remove-orphans

  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Clean up old Docker images
        run: |
          KEEP=4
          REPO="alelex10/backend-crm"
          TAGS=$(curl -s -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" "https://hub.docker.com/v2/repositories/${REPO}/tags?page_size=100" | jq -r '.results[].name')
          COUNT=$(echo "$TAGS" | wc -l)

          if [ "$COUNT" -gt "$KEEP" ]; then
            DELETE_TAGS=$(echo "$TAGS" | head -n -$KEEP)
            for tag in $DELETE_TAGS; do
              echo "Deleting $tag..."
              curl -s -X DELETE -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" \
                "https://hub.docker.com/v2/repositories/${REPO}/tags/${tag}/"
            done
          else
            echo "No tags to delete."
          fi
