name: CI/CD - Build & Deploy to OCI

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: alelex10/backend-crm

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üß† Cache de capas de Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push with cache
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.image_tag }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install ssh client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Add host to known_hosts
        run: ssh-keyscan -H ${{ secrets.TARGET_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH - stop, pull and run
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.TARGET_HOST }}
          username: ${{ secrets.TARGET_USER }}
          key: ${{ secrets.OCI_SSH_KEY }}
          script: |
            set -e
            IMAGE="alelex10/${{ secrets.CONTAINER_NAME }}:${{ needs.build-and-push.outputs.image_tag }}"
            CONTAINER_NAME="${{ secrets.CONTAINER_NAME }}"
            CONTAINER_PORT="${{ secrets.CONTAINER_PORT }}"

            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker pull $IMAGE

            docker run -d \
              -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e JWT_SALT_ROUNDS='${{ secrets.JWT_SALT_ROUNDS }}' \
              --name $CONTAINER_NAME -p $CONTAINER_PORT:3000 --restart unless-stopped $IMAGE

  cleanup-old-images:
    runs-on: ubuntu-latest
    # needs: build-and-push
    steps:
      - name: Login to Docker Hub
        run: echo "Logged in as ${{ secrets.DOCKERHUB_USERNAME }}"

      - name: Clean up old Docker images on Docker Hub
        run: |
          KEEP=4
          REPO="alelex10/backend-crm"
          
          echo "üîç Getting tags for $REPO..."

          TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ secrets.DOCKERHUB_USERNAME }}/backend-crm:pull" -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" | jq -r '.token')

          TAGS=$(curl -s -H "Authorization: Bearer $TOKEN" "https://registry-1.docker.io/v2/${{secrets.DOCKERHUB_USERNAME}}/${{ secrets.CONTAINER_NAME }}/tags/list" | jq -r '.tags[]')

          COUNT=$(echo "$TAGS" | wc -l)
          echo "Found $COUNT tags"

          echo "üóëÔ∏è Deleting old tags..."

          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.DOCKERHUB_USERNAME }}\", \"password\": \"${{ secrets.DOCKERHUB_TOKEN }}\"}" https://hub.docker.com/v2/users/login/ | jq -r '.token')
          
          if [ "$COUNT" -gt "$KEEP" ]; then
            DELETE_TAGS=$(echo "$TAGS" | head -n -$KEEP)
            for tag in $DELETE_TAGS; do
              echo "üóëÔ∏è Deleting $tag..."
              curl -i -X DELETE \
                -H "Accept: application/json" \
                -H "Authorization: JWT $HUB_TOKEN" \
                https://hub.docker.com/v2/repositories/alelex10/backend-crm/tags/$tag/
            done
          else
            echo "No tags to delete."
          fi
